apply plugin: "java"

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
}

java{
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_17
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8', '-AdisableOverwriteChecker=true'])
    }

    repositories{
        mavenCentral()
        maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
        maven{ url 'https://www.jitpack.io' }
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    ext{
        asmVersion = "9.5"
        //the build number that this mod is made for
        mindustryVersion = 'v146'
        jabelVersion = "93fde537c7"
        //windows sucks
        isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
        sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

        androidPlatformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
        java8Root = System.getenv("JAVA_8_HOME")

        projectRootDir = "$buildDir/.."
        runtimeBinDir = "$projectRootDir/bin/main"

        check = {
            if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");
            if(!androidPlatformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

            if (!java8Root) throw new GradleException("No JAVA_8_HOME found. Ensure that you have an jave 8 installed and set JAVA_8_HOME correctly.")
        }

        getJava8Rt = {
            check()
            def f = new File(java8Root, "../lib/rt.jar");
            if (!f.exists()) throw new GradleException("No rt.jar found in JAVA_8_HOME/../lib/. Ensure that you have set JAVA_8_HOME correctly.")
            return f;
        }

        getDependencies = {
            return (configurations.compileClasspath.asList()).collect{ "--classpath $it.path" }.join(" ")
        }

        r8 = { String input, String output, String basePath ->
            def dependencies = getDependencies()
            def r8Cmd = isWindows ? "r8.bat" : "r8"
            "$r8Cmd $dependencies --min-api 14 --debug --no-tree-shaking --no-minification --pg-conf ../../proguard-rules.pro --output ${output} ${input}"
                .execute(null, new File("$basePath")).waitForProcessOutput(System.out, System.err)
        }

        dex2jar = { String input, String output ->
            "java -jar ./dependencies/dex2jar.jar $input -o $output"
                .execute(null, new File("$projectRootDir")).waitForProcessOutput(System.out, System.err)
        }
    }
}

dependencies{
    implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Arc:backend-sdl:$mindustryVersion"
    compileOnly "com.github.Anuken.Arc:backend-android:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    compileOnly(files("dependencies/mtd.android.jar"))
    compileOnly(files("dependencies/mtd.desktop.jar"))

    compileOnly(files((new File(androidPlatformRoot, "android.jar").path)))
    compileOnly "com.github.Anuken:rhino:73a812444a"

    compileOnly "com.jakewharton.android.repackaged:dalvik-dx:9.0.0_r3"
    
    implementation "com.github.google.guava:guava:v21.0"
    implementation "com.google.code.gson:gson:2.2.4"
    
    if (Float.parseFloat(asmVersion) < 6) {
        implementation "org.ow2.asm:asm-debug-all:$asmVersion"
    }
    implementation "org.ow2.asm:asm-tree:$asmVersion"
    implementation "org.ow2.asm:asm-commons:$asmVersion"
    implementation "org.ow2.asm:asm-util:$asmVersion"

    implementation "com.github.DSFdsfWxp:Mixin:v0.8.5.3"

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"

    implementation 'com.github.DSFdsfWxp:dx:v9.0.0'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    annotationProcessor "org.ow2.asm:asm-tree:$asmVersion"
    annotationProcessor "com.github.google.guava:guava:v21.0"
}

//force arc version
configurations.all{
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

task preMainMixinBootstrapJar(type: Jar) {
    dependsOn "jar"

    archiveFileName = "preMain.desktop.jar"
    destinationDirectory = new File("$buildDir/libs/class/")

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    manifest {
        attributes "Main-Class": "finalCampaign.launch.desktopLauncher"
    }

    from { [ "override/", zipTree("$buildDir/libs/${project.archivesBaseName}.desktop.raw.jar") ] }

    include("META-INF/services/**")
    include("org/spongepowered/**")
    include("org/objectweb/**")
    include("com/google/**")
    include("shims/**")

    include("arc/util/**")
    include("arc/math/**")
    include("arc/struct/**")
    include("arc/func/**")
    include("arc/Files*")

    include("finalCampaign/launch/desktop*")
    include("finalCampaign/launch/share*")
    include("finalCampaign/launch/both*")

    exclude("finalCampaign/com/**")

    include("fcLaunch/**")
    include("fcMixin/**")

    include("LICENSE.txt")

}

task jarAndroid(type: Jar) {
    dependsOn "preMainMixinBootstrapMixJarAndroid"

    archiveFileName = "${base.archivesBaseName}.android.raw.jar"

    from { zipTree("$buildDir/libs/${project.archivesBaseName}.desktop.raw.jar") }

    exclude("META-INF/**")
    exclude("org/**")
    exclude("com/**")
    exclude("shims/**")

    exclude("finalCampaign/launch/desktop*")
    exclude("finalCampaign/launch/android*")
    exclude("finalCampaign/launch/share*")
    exclude("finalCampaign/launch/sideDesktop*")

    exclude("arc/**")

    exclude("fcLaunch/**")
    exclude("fcMixin/**")
    exclude("class/**")
    exclude("cert/**")

    exclude("LICENSE.txt")

    doLast{
        r8("${base.archivesBaseName}.android.raw.jar", "${base.archivesBaseName}.android.dex.jar", "$buildDir/libs")
    }
        }

        task preMainMixinBootstrapMixJarAndroid(type: Jar) {
    dependsOn "preMainMixinBootstrapSrcJarAndroid"

    archiveFileName = "preMain.android.jar"
    destinationDirectory = new File("$buildDir/libs/class/")

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from { ["override/", zipTree("$buildDir/libs/${project.archivesBaseName}.desktop.raw.jar"), zipTree("$buildDir/libs/class/preMain.android.dex.jar")] }

    include("META-INF/services/**")
    include("LICENSE.txt")
    include("classes.dex")

    from(".") {
        include "assets/fcLaunch/**"
        include "assets/fcMixin/**"
    }

    doLast {
        delete {
            delete "$buildDir/libs/class/preMain.android.dex.jar"
            delete "$buildDir/libs/class/preMain.android.raw.jar"
            delete "$buildDir/libs/class/preMain.android.src.raw.jar"
            delete "$buildDir/libs/class/preMain.android.src.dex.jar"
        }
    }

        }

        task preMainMixinBootstrapSrcJarAndroid(type: Jar) {
    dependsOn "preMainMixinBootstrapJarAndroid"

    archiveFileName = "preMain.android.src.raw.jar"
    destinationDirectory = new File("$buildDir/libs/class/")

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from { zipTree("$buildDir/libs/${project.archivesBaseName}.desktop.raw.jar") }

    include("finalCampaign/launch/android*")
    include("finalCampaign/launch/share*")
    include("finalCampaign/launch/both*")

    include("finalCampaign/patch/**")

    doLast {
        r8("./class/preMain.android.src.raw.jar", "./class/preMain.android.src.dex.jar", "$buildDir/libs")
        dex2jar("./build/libs/class/preMain.android.src.dex.jar", "./build/libs/class/preMain.android.src.jar")
    }
        }

        task preMainMixinBootstrapJarAndroid(type: Jar) {
    dependsOn "finalJar"

    archiveFileName = "preMain.android.raw.jar"
    destinationDirectory = new File("$buildDir/libs/class/")

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from { [ "override/", zipTree("$buildDir/libs/${project.archivesBaseName}.desktop.raw.jar"), zipTree(getJava8Rt()) ] }

    include("META-INF/services/**")
    include("org/spongepowered/**")
    include("org/objectweb/**")
    include("com/google/**")

    include("finalCampaign/launch/android*")
    include("finalCampaign/launch/share*")
    include("finalCampaign/launch/both*")

    include("arc/util/**")
    include("arc/math/**")
    include("arc/struct/**")
    include("arc/func/**")
    include("arc/Files*")

    include("finalCampaign/com/**")

    include("javax/lang/**")
    include("javax/tools/Diagnostic*")
    include("javax/annotation/processing/Messager*")

    doLast {
        r8("./class/preMain.android.raw.jar", "./class/preMain.android.dex.jar", "$buildDir/libs")
    }
}

task buildDesktop(type: Jar) {
    dependsOn "jar"
    dependsOn "preMainMixinBootstrapJar"

    archiveFileName = "${base.archivesBaseName}Desktop.jar"

    from { zipTree("$buildDir/libs/${project.archivesBaseName}.desktop.raw.jar") }

    exclude("META-INF/services/**")
    exclude("org/**")
    exclude("com/**")
    exclude("shims/**")

    exclude("finalCampaign/launch/desktop*")
    exclude("finalCampaign/launch/android*")
    exclude("finalCampaign/launch/share*")
    exclude("finalCampaign/launch/sideAndroid*")

    exclude("finalCampaign/com/**")

    exclude("arc/**")

    exclude("fcLaunch/**")
    exclude("fcMixin/**")

    exclude("LICENSE.txt")

    from("$buildDir/libs/") {
        include("class/**")
    }
}

task buildAndroid(type: Jar) {
    dependsOn "jarAndroid"

    archiveFileName = "${base.archivesBaseName}Android.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}.android.dex.jar")] }

    from("$buildDir/libs/") {
        include("class/preMain.android.jar")
        include("class/preMain.android.src.jar")
    }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}.android.raw.jar"
            delete "$buildDir/libs/${project.archivesBaseName}.android.dex.jar"
        }
    }
}

jar {
    archiveFileName = "${base.archivesBaseName}.desktop.raw.jar"

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from{[
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    ]}

    exclude("META-INF/maven/**")
    exclude("META-INF/*.SF")
    exclude("META-INF/*.RSA")
    exclude("module-info.class")

    exclude("org/spongepowered/asm/launch/MixinLaunchPlugin*")
    exclude("org/spongepowered/asm/launch/MixinTransformationService*")
    exclude("org/spongepowered/asm/launch/platform/container/ContainerHandleModLauncherEx*")
    exclude("org/spongepowered/tools/**")
    exclude("org/spongepowered/asm/mixin/transformer/debug/**")
    exclude("org/spongepowered/asm/service/modlauncher/**")
    exclude("org/spongepowered/asm/service/mojang/**")
    exclude("org/spongepowered/asm/launch/platform/MixinPlatformAgentFMLLegacy*")
    exclude("org/spongepowered/asm/launch/MixinTweaker*")
    exclude("org/spongepowered/asm/mixin/EnvironmentStateTweaker*")
    exclude("org/spongepowered/asm/mixin/transformer/Proxy*")

    exclude("finalCampaign/tool/**")

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar) {
    dependsOn "buildAndroid"
    dependsOn "buildDesktop"

    archiveFileName = "${base.archivesBaseName}.jar"

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from{ [ zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar") ] }

    doLast {
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
            delete "$buildDir/libs/${project.archivesBaseName}.desktop.raw.jar"
        }
    }
}

task genNet {
    doLast {
        def dependencies = (configurations.compileClasspath.asList()).collect{ "$it.path" }.join(";")
        def dir = new File("$buildDir/genNet")
        mkdir("$buildDir/genNet")
        "javac -g -parameters -cp $dependencies;$runtimeBinDir -d $buildDir/genNet ./src/finalCampaign/net/fcAction.java"
            .execute(null, new File("$projectRootDir")).waitForProcessOutput(System.out, System.err)
        "java -cp $dependencies;$buildDir/genNet;$runtimeBinDir finalCampaign.tool.genNet"
            .execute(null, new File("$projectRootDir")).waitForProcessOutput(System.out, System.err)
    }
}